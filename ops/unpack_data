#!/bin/bash -euf

COLOROFF='\033[0m'
LIGHTGREEN='\033[1;32m'
RED='\033[0;31m'

LOG_FILE=$ANNO_DATA/UNPACK_DATA_LOG
TMP_BACKUP=.tmp

# Log to both file and to stdout with timestamp
exec &> >(tee -a "$LOG_FILE")
echo() {
    command echo -e "$(date "+%F %T,%3N") - $(basename "$0") - echo - $*"
}

cleanup() {
    EXIT_CODE=$?
    trap - EXIT SIGINT SIGQUIT SIGTERM
    if [[ $EXIT_CODE != 0 ]]; then
        echo -e "${RED}Something went wrong with unpacking data. Reverting changes.$COLOROFF"
        echo "Removing extracted files"
        # Remove files created after TIMESTAMP
        find . -type f -cnewer $TMP_BACKUP/TIMESTAMP -not -path "./$TMP_BACKUP*" -delete -print
        rm $TMP_BACKUP/TIMESTAMP
        find . -type d -empty -not -path "./$TMP_BACKUP" -delete -print

        pushd "$ANNO_DATA/$TMP_BACKUP" >/dev/null
        echo "Applying backup"
        # First create directories, then move back files
        find . -type d -exec mkdir -p "$ANNO_DATA/"{} \; -print
        find . -type f -exec mv {} "$ANNO_DATA/"{} \; -print
        popd >/dev/null
        find . -type d -empty -delete -print
        echo "${LIGHTGREEN}Changes reverted.${COLOROFF}"
    else
        rm -r $TMP_BACKUP
    fi
    exit $EXIT_CODE
}
trap cleanup SIGINT SIGQUIT SIGTERM EXIT

echo "Unpack data triggered"

pushd "$ANNO_DATA" >/dev/null
if [[ ! -f ${TAR_INPUT} ]]; then
    echo "${RED}No such file $TAR_INPUT$COLOROFF"
    exit 1
fi

# Move files in overlapping folders to a temporary backup
echo "Moving files in folders affected to temporary backup folder $TMP_BACKUP"
mkdir -p $TMP_BACKUP
touch $TMP_BACKUP/TIMESTAMP
sleep 1 # Add sleep here so files are created after TIMESTAMP (apparently some missing granularity)

mapfile -t BACKUP_DIRS < <(tar -tf "$TAR_INPUT" | grep -E '/$')
for dirname in "${BACKUP_DIRS[@]}"; do
    # if a dir in the tar file is non-empty locally, move it to the temp backup until update finishes
    if [[ -n $(find "$dirname" -maxdepth 0 -type d ! -empty -print) ]]; then
        mkdir -p "$TMP_BACKUP/$dirname"
        mv "$dirname" "$TMP_BACKUP/"
    fi
done

BACKUP_FILES=(sources.json vcfanno_config.toml)
for filename in "${BACKUP_FILES[@]}"; do
    [[ -f "$filename" ]] && cp "$filename" $TMP_BACKUP/
done
echo "Done"

# Extract data from tar (excluding sources.json and vcfanno_config.toml)
echo "Extracting data from $TAR_INPUT"
tar -xvf "$TAR_INPUT" --exclude sources.json --exclude PACKAGES

# Update sources.json and vcfanno_config.toml. Avoid overwriting them
echo "Updating sources.json and vcfanno_config.toml"
python3 - <<EOF
import json, os, pathlib, tarfile
os.chdir("/anno/ops")
from sync_data import update_vcfanno_toml, update_sources

existing_sources = pathlib.Path("/anno/data/sources.json")
existing_vcfanno_config = pathlib.Path("/anno/data/vcfanno_config.toml")
with tarfile.open(os.environ["TAR_INPUT"], "r") as tar_input:
    tarred_packages = [s.decode("utf-8") for s in tar_input.extractfile("PACKAGES").read().splitlines()]
    tar_sources = json.load(tar_input.extractfile("sources.json"))
    for pkg_name, sources in tar_sources.items():
        if pkg_name not in tarred_packages:
            print(f"{pkg_name} not in TAR-file. Not updating sources.")
            continue

        update_sources(existing_sources, pkg_name, sources)
        if sources.get("vcfanno"):
            update_vcfanno_toml(pkg_name, sources["vcfanno"], existing_vcfanno_config)
EOF

echo "${LIGHTGREEN}Data successfully added${COLOROFF}"
