#!/bin/bash -euf

# Log to both file and to stdout with timestamp
LOG_FILE=/anno/data/UNPACK_DATA_LOG
exec &> >(tee -a "$LOG_FILE")
function echo() {
        command echo -e $(date "+%F %T,%3N") - `basename "$0"` - echo - "$@"
}

echo "Unpack data triggered"

COLOROFF='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
LIGHTGREEN='\033[1;32m'

pushd /anno/data >/dev/null


function cleanup() {
    EXIT_CODE=$?
    trap - EXIT SIGINT SIGQUIT SIGTERM
    if [ ! $EXIT_CODE -eq 0 ]
    then
        echo -e ${RED}"Something went wrong with unpacking data. Reverting changes."${COLOROFF}
        echo "Removing extracted files"
        # Actually remove files created after TIMESTAMP
        find . -type f -cnewer .tmp/TIMESTAMP -not -path "./.tmp*" -exec rm {} \;
        rm .tmp/TIMESTAMP
        find . -type d -empty -delete

        pushd /anno/data/.tmp >/dev/null
        echo "Applying backup"
        # First create directories, then move back files
        find . -type d -exec mkdir -p /anno/data/{} \;
        find . -type f -exec mv {} /anno/data/{} \;
        popd >/dev/null
        find . -type d -empty -delete
        echo ${LIGHTGREEN}"Changes reverted."${COLOROFF}
    else
        rm -r .tmp
    fi
    exit $EXIT_CODE

}

trap cleanup SIGINT SIGQUIT SIGTERM EXIT

if [[ ! -f ${TAR_INPUT} ]]; then
    echo ${RED}"No such file ${TAR_INPUT}"${COLOROFF}
    exit 1
fi
# Move files in overlapping folders to a temporary backup
echo "Moving files in folders affected to temporary backup folder .tmp"
mkdir -p .tmp
touch .tmp/TIMESTAMP
sleep 1 # Add sleep here so files are created after TIMESTAMP (apparently some missing granularity)
set +e
tar -tf ${TAR_INPUT} | grep -E '/$' | xargs -i@ /bin/bash -c "[[ -d @ ]] && mkdir -p .tmp/@ && mv @* .tmp/@ && rm -r @"
set -e
if [[ -f sources.json ]]; then
    cp sources.json .tmp/
fi

if [[ -f vcfanno_config.toml ]]; then
    cp vcfanno_config.toml .tmp/
fi
echo "Done"

# Extract data from tar (excluding sources.json and vcfanno_config.toml)
echo "Extracting data from ${TAR_INPUT}"
tar -xvf ${TAR_INPUT} --exclude sources.json --exclude PACKAGES

# Update sources.json and vcfanno_config.toml. Avoid overwriting them
echo "Updating sources.json and vcfanno_config.toml"
python3 - << EOF
import tarfile, json, pathlib, os
os.chdir("/anno/ops")
from sync_data import update_vcfanno_toml, update_sources

existing_sources = pathlib.Path("/anno/data/sources.json")
existing_vcfanno_config = pathlib.Path("/anno/data/vcfanno_config.toml")
with tarfile.open(os.environ["TAR_INPUT"], "r") as tar_input:
    tarred_packages = [s.decode("utf-8") for s in tar_input.extractfile("PACKAGES").read().splitlines()]
    tar_sources = json.load(tar_input.extractfile("sources.json"))
    for pkg_name, sources in tar_sources.items():
        if pkg_name not in tarred_packages:
            print(f"{pkg_name} not in TAR-file. Not updating sources.")
            continue

        update_sources(existing_sources, pkg_name, sources)
        if sources.get("vcfanno"):
            dataset = sources.copy()
            dataset.update({"destination": ""})
            update_vcfanno_toml(pkg_name, dataset, sources["vcfanno"], existing_vcfanno_config)
EOF

echo ${LIGHTGREEN}"Data successfully added"${COLOROFF}
