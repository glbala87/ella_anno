#!/bin/bash

# For dev/demo use only! Production uses external database

# Create the Postgres data directory, the database cluster in said folder and start the server.
#
# We make sure to shutdown postgres gently. Some shutdown modes will put postgres in bad state, making
# a restart take a long time (replay of xlog/transaction logs).
#
# Also handles multiple start/stop cycles (Ã­.e. using supervisorctl to stop/start). We only run initdb once.
# Creating root user fails the second time, but the script continues.

PG_BIN=/usr/lib/postgresql/11/bin

if [ "$1" =  "init" ]; then
    echo "Init of Postgres cluster in $PGDATA"

    mkdir -p $PGDATA
    chown postgres $PGDATA

    if [ -d "$PGDATA/pg_clog" ]; then
       echo "The database data dir already exists."
    else
        echo "Creating database cluster in $PGDATA"
        gosu postgres $PG_BIN/initdb
    fi

    gosu postgres $PG_BIN/postgres --single -jE <<-EOSQL
       CREATE USER root WITH SUPERUSER PASSWORD 'omgenetics' ;
EOSQL

fi


function wait_for_ready() {
    timer=${1:-15}
    until runuser -l postgres -c 'pg_isready' 2>/dev/null; do
        >&2 echo "[$(date -d %Y-%m-%d\ %H:%M:%S)] Postgres is unavailable - sleeping for $timer seconds"
        sleep $timer
    done
}

function shutdown()
{
    echo "Shutting down PostgreSQL"
    pkill postgres
}

echo "Starting PostgreSQL"

if [ -d /var/run/postgresql ]; then
    chmod 2775 /var/run/postgresql
else
    install -d -m 2775 -o postgres -g postgres /var/run/postgresql
fi

# Allow any signal which would kill a process to stop PostgreSQL using the 'shutdown' function
# KILL goes directly to kernel, so it's useless here.
trap shutdown HUP INT QUIT ABRT KILL ALRM TERM TSTP

exec gosu postgres $PG_BIN/postgres &

if [ "$1" = "init" ]; then
    # make sure postgres has started
    wait_for_ready

    echo "Extracting database from dump"
    dropdb uta
    dropuser uta_admin
    createuser -U postgres uta_admin
    createdb -U postgres -O uta_admin uta
    gzip -cdq /$UTA_VERSION.pgd.gz | psql -q -U uta_admin -1 -v ON_ERROR_STOP=1 -d uta
    echo "Refreshing materialized views"
    psql -U uta_admin -d uta -c "REFRESH MATERIALIZED VIEW ${UTA_VERSION}.exon_set_exons_fp_mv;"
    psql -U uta_admin -d uta -c "REFRESH MATERIALIZED VIEW ${UTA_VERSION}.tx_exon_set_summary_mv;"
    psql -U uta_admin -d uta -c "REFRESH MATERIALIZED VIEW ${UTA_VERSION}.tx_def_summary_mv;"
    touch $PGDATA/pgready
    rm /$UTA_VERSION.pgd.gz
    echo "Database ready"
else
    echo "Postgres started"
    sleep infinity
fi
