---
# ref: https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
include:
    - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

image: docker:20.10.7
services:
    - docker:20.10.7-dind

variables:
    BRANCH: $CI_COMMIT_REF_NAME
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: /certs
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
    # show useful build info
    BUILDKIT_PROGRESS: plain

    # we can only build to one image name, everything has to be done under tags
    BUILDER_COMMIT_TAG: builder-$CI_COMMIT_REF_SLUG
    BUILDER_LATEST_TAG: builder-latest
    PROD_COMMIT_TAG: prod-$CI_COMMIT_REF_SLUG
    PROD_LATEST_TAG: prod-latest
    PIPELINE_ID: anno-$CI_PIPELINE_ID
    USE_REGISTRY: 1

# include:
#     - template: Container-Scanning.gitlab-ci.yml
#     - template: Dependency-Scanning.gitlab-ci.yml
#     - template: SAST.gitlab-ci.yml
#     - template: License-Scanning.gitlab-ci.yml
# Gitlab security scans
#
# dependency_scanning:
#     stage: test
#     only:
#         - tags
#         - dev
#         - master
#
# container_scanning:
#     stage: test
#     only:
#         - tags
#         - dev
#         - master
#
# sast:
#     stage: test
#     only:
#         - tags
#         - dev
#         - master
#
# license_scanning:
#     stage: test
#     only:
#         - tags
#         - dev
#         - master

stages:
    - build
    - test
    - update_latest
    - release

.image_setup: &image-setup
    before_script:
        - apk add --update make git
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# build both at once to reuse local cache
build_docker:
    stage: build
    extends: .image_setup
    script:
        - make build BUILD_OPTS="--cache-from=$CI_REGISTRY_IMAGE:$PROD_COMMIT_TAG --cache-from=$CI_REGISTRY_IMAGE:$PROD_LATEST_TAG --cache-from=$CI_REGISTRY_IMAGE:$BUILDER_LATEST_TAG"
        - make build-annobuilder BUILD_OPTS="--cache-from=$CI_REGISTRY_IMAGE:$BUILDER_COMMIT_TAG --cache-from=$CI_REGISTRY_IMAGE:$PROD_COMMIT_TAG --cache-from=$CI_REGISTRY_IMAGE:$BUILDER_LATEST_TAG"
        - docker push $CI_REGISTRY_IMAGE:$PROD_COMMIT_TAG
        - docker push $CI_REGISTRY_IMAGE:$BUILDER_COMMIT_TAG
    tags:
        - bastion

check_do:
    stage: test
    extends: .image_setup
    script:
        - docker pull $CI_REGISTRY_IMAGE:$BUILDER_COMMIT_TAG | cat || true
        - make verify-digital-ocean
    tags:
        - bastion

check_pipenv:
    stage: test
    extends: .image_setup
    script:
        - make pipenv-check
    tags:
        - bastion

run_pytest:
    extends: .image_setup
    stage: test
    script:
        - docker pull $CI_REGISTRY_IMAGE:$BUILDER_COMMIT_TAG | cat || true
        - docker pull $CI_REGISTRY_IMAGE:$PROD_COMMIT_TAG | cat || true
        - make download-data RUN_CMD_ARGS="--skip-validation --force"
        - make test
        - make test-ops
    tags:
        - do-large

update_latest_builder:
    stage: update_latest
    extends: .image_setup
    script:
        - docker pull $CI_REGISTRY_IMAGE:$BUILDER_COMMIT_TAG | cat || true
        - docker tag $CI_REGISTRY_IMAGE:$BUILDER_COMMIT_TAG $CI_REGISTRY_IMAGE:$BUILDER_LATEST_TAG
        - docker push $CI_REGISTRY_IMAGE:$BUILDER_LATEST_TAG
    tags:
        - bastion

update_anno_latest:
    stage: update_latest
    extends: .image_setup
    script:
        - docker pull $CI_REGISTRY_IMAGE:$PROD_COMMIT_TAG | cat || true
        - docker tag $CI_REGISTRY_IMAGE:$PROD_COMMIT_TAG $CI_REGISTRY_IMAGE:$PROD_LATEST_TAG
        - docker push $CI_REGISTRY_IMAGE:$PROD_LATEST_TAG
    tags:
        - bastion

release_singularity:
    stage: release
    extends: .image_setup
    script:
        - docker pull $CI_REGISTRY_IMAGE:$PROD_COMMIT_TAG | cat || true
        - make singularity-release IMAGE_NAME=$CI_REGISTRY_IMAGE
    artifacts:
        name: 'anno-$CI_COMMIT_REF_NAME-singularity'
        paths:
            - release/
        expire_in: 30 days
    rules:
        - if: '$CI_PIPELINE_SOURCE == "api"'
